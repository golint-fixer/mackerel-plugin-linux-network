package main

import (
	mp "github.com/mackerelio/go-mackerel-plugin-helper"
)

var mapping = map[string]string{
	"TcpExtSyncookiesSent":            "tcp.syncookies.sent",
	"TcpExtSyncookiesRecv":            "tcp.syncookies.recv",
	"TcpExtSyncookiesFailed":          "tcp.syncookies.failed",
	"TcpExtEmbryonicRsts":             "tcp.misc_errors.embryonic_rsts",
	"TcpExtPruneCalled":               "tcp.misc_errors.prune_called",
	"TcpExtRcvPruned":                 "tcp.misc_errors.rcv_pruned",
	"TcpExtOfoPruned":                 "tcp.misc_errors.ofo_pruned",
	"TcpExtOutOfWindowIcmps":          "",
	"TcpExtLockDroppedIcmps":          "",
	"TcpExtArpFilter":                 "",
	"TcpExtTW":                        "tcp.timewait.timewait",
	"TcpExtTWRecycled":                "tcp.timewait.recycled",
	"TcpExtTWKilled":                  "tcp.timewait.killed",
	"TcpExtPAWSPassive":               "tcp.paws.passive",
	"TcpExtPAWSActive":                "tcp.paws.active",
	"TcpExtPAWSEstab":                 "tcp.paws.estab",
	"TcpExtDelayedACKs":               "tcp.delayed_acks.sent",
	"TcpExtDelayedACKLocked":          "tcp.delayed_acks.locked",
	"TcpExtDelayedACKLost":            "tcp.delayed_acks.lost",
	"TcpExtListenOverflows":           "tcp.misc_errors.listen_overflows",
	"TcpExtListenDrops":               "tcp.misc_errors.listen_drops",
	"TcpExtTCPPrequeued":              "tcp.queueing.prequeued",
	"TcpExtTCPDirectCopyFromBacklog":  "tcp.queueing.direct_copy_from_backlog",
	"TcpExtTCPDirectCopyFromPrequeue": "tcp.queueing.direct_copy_from_prequeue",
	"TcpExtTCPPrequeueDropped":        "tcp.queueing.prequeue_dropped",
	"TcpExtTCPHPHits":                 "tcp.header_prediction.hits",
	"TcpExtTCPHPHitsToUser":           "tcp.header_prediction.hits_to_user",
	"TcpExtTCPPureAcks":               "tcp.header_prediction.pure_acks",
	"TcpExtTCPHPAcks":                 "tcp.header_prediction.acks",
	"TcpExtTCPRenoRecovery":           "",
	"TcpExtTCPSackRecovery":           "",
	"TcpExtTCPSACKReneging":           "",
	"TcpExtTCPFACKReorder":            "",
	"TcpExtTCPSACKReorder":            "",
	"TcpExtTCPRenoReorder":            "",
	"TcpExtTCPTSReorder":              "",
	"TcpExtTCPFullUndo":               "",
	"TcpExtTCPPartialUndo":            "",
	"TcpExtTCPDSACKUndo":              "",
	"TcpExtTCPLossUndo":               "",
	"TcpExtTCPLoss":                   "",
	"TcpExtTCPLostRetransmit":         "",
	"TcpExtTCPRenoFailures":           "",
	"TcpExtTCPSackFailures":           "",
	"TcpExtTCPLossFailures":           "",
	"TcpExtTCPFastRetrans":            "",
	"TcpExtTCPForwardRetrans":         "",
	"TcpExtTCPSlowStartRetrans":       "",
	"TcpExtTCPTimeouts":               "tcp.timeout.timeouts",
	"TcpExtTCPRenoRecoveryFail":       "",
	"TcpExtTCPSackRecoveryFail":       "",
	"TcpExtTCPSchedulerFailed":        "tcp.misc_errors.scheduler_failed",
	"TcpExtTCPRcvCollapsed":           "tcp.misc_errors.rcv_collapsed",
	"TcpExtTCPDSACKOldSent":           "",
	"TcpExtTCPDSACKOfoSent":           "",
	"TcpExtTCPDSACKRecv":              "",
	"TcpExtTCPDSACKOfoRecv":           "",
	"TcpExtTCPAbortOnData":            "tcp.abort.on_data",
	"TcpExtTCPAbortOnClose":           "tcp.abort.on_close",
	"TcpExtTCPAbortOnMemory":          "tcp.abort.on_memory",
	"TcpExtTCPAbortOnTimeout":         "tcp.abort.on_timeout",
	"TcpExtTCPAbortOnLinger":          "tcp.abort.on_linger",
	"TcpExtTCPAbortFailed":            "tcp.abort.failed",
	"TcpExtTCPMemoryPressures":        "",
	"TcpExtTCPSACKDiscard":            "",
	"TcpExtTCPDSACKIgnoredOld":        "",
	"TcpExtTCPDSACKIgnoredNoUndo":     "",
	"TcpExtTCPSpuriousRTOs":           "",
	"TcpExtTCPMD5NotFound":            "",
	"TcpExtTCPMD5Unexpected":          "",
	"TcpExtTCPSackShifted":            "",
	"TcpExtTCPSackMerged":             "",
	"TcpExtTCPSackShiftFallback":      "",
	"TcpExtTCPBacklogDrop":            "",
	"TcpExtTCPMinTTLDrop":             "",
	"TcpExtTCPChallengeACK":           "",
	"TcpExtTCPSYNChallenge":           "",
	"IpExtInNoRoutes":                 "ip.packet_type.no_routes",
	"IpExtInTruncatedPkts":            "ip.packet_type.truncated",
	"IpExtInMcastPkts":                "ip.packet_type.in_mcast",
	"IpExtOutMcastPkts":               "ip.packet_type.out_mcast",
	"IpExtInBcastPkts":                "ip.packet_type.in_bcast",
	"IpExtOutBcastPkts":               "ip.packet_type.out_bcast",
	"IpExtInOctets":                   "ip.octets.in",
	"IpExtOutOctets":                  "ip.octets.out",
	"IpExtInMcastOctets":              "ip.octets.in_mcast",
	"IpExtOutMcastOctets":             "ip.octets.out_mcast",
	"IpExtInBcastOctets":              "ip.octets.in_bcast",
	"IpExtOutBcastOctets":             "ip.octets.out_bcast",
	"IpForwarding":                    "",
	"IpDefaultTTL":                    "",
	"IpInReceives":                    "ip.datagrams.in_receives",
	"IpInHdrErrors":                   "ip.datagrams.in_hdr_errors",
	"IpInAddrErrors":                  "ip.datagrams.in_addr_errors",
	"IpForwDatagrams":                 "ip.datagrams.forwarded",
	"IpInUnknownProtos":               "ip.datagrams.in_unknown_protos",
	"IpInDiscards":                    "ip.datagrams.in_discards",
	"IpInDelivers":                    "ip.datagrams.in_delivers",
	"IpOutRequests":                   "ip.datagrams.out_requests",
	"IpOutDiscards":                   "ip.datagrams.out_discards",
	"IpOutNoRoutes":                   "ip.datagrams.out_no_routes",
	"IpReasmTimeout":                  "ip.reassembly.timeout",
	"IpReasmReqds":                    "ip.reassembly.reqds",
	"IpReasmOKs":                      "ip.reassembly.oks",
	"IpReasmFails":                    "ip.reassembly.fails",
	"IpFragOKs":                       "ip.fragmentation.oks",
	"IpFragFails":                     "ip.fragmentation.fails",
	"IpFragCreates":                   "",
	"IcmpInMsgs":                      "icmp.messages.in_msgs",
	"IcmpInErrors":                    "icmp.messages.in_errors",
	"IcmpInDestUnreachs":              "icmp.messages.in_dest_unreachs",
	"IcmpInTimeExcds":                 "icmp.messages.in_time_excds",
	"IcmpInParmProbs":                 "icmp.messages.in_parm_probs",
	"IcmpInSrcQuenchs":                "icmp.messages.in_src_quenchs",
	"IcmpInRedirects":                 "icmp.messages.in_redirects",
	"IcmpInEchos":                     "icmp.messages.in_echos",
	"IcmpInEchoReps":                  "icmp.messages.in_echo_reps",
	"IcmpInTimestamps":                "icmp.messages.in_timestamps",
	"IcmpInTimestampReps":             "icmp.messages.in_timestamp_reps",
	"IcmpInAddrMasks":                 "icmp.messages.in_addr_masks",
	"IcmpInAddrMaskReps":              "icmp.messages.in_addr_mask_reps",
	"IcmpOutMsgs":                     "icmp.messages.out_msgs",
	"IcmpOutErrors":                   "icmp.messages.out_errors",
	"IcmpOutDestUnreachs":             "icmp.messages.out_dest_unreachs",
	"IcmpOutTimeExcds":                "icmp.messages.out_time_excds",
	"IcmpOutParmProbs":                "icmp.messages.out_parm_probs",
	"IcmpOutSrcQuenchs":               "icmp.messages.out_src_quenchs",
	"IcmpOutRedirects":                "icmp.messages.out_redirects",
	"IcmpOutEchos":                    "icmp.messages.out_echos",
	"IcmpOutEchoReps":                 "icmp.messages.out_echo_reps",
	"IcmpOutTimestamps":               "icmp.messages.out_timestamps",
	"IcmpOutTimestampReps":            "icmp.messages.out_timestamp_reps",
	"IcmpOutAddrMasks":                "icmp.messages.out_addr_masks",
	"IcmpOutAddrMaskReps":             "icmp.messages.out_addr_mask_reps",
	"IcmpMsgInType0":                  "icmp.messages.in_type0",
	"IcmpMsgInType3":                  "icmp.messages.in_type3",
	"IcmpMsgInType8":                  "icmp.messages.in_type8",
	"IcmpMsgInType11":                 "icmp.messages.in_type11",
	"IcmpMsgOutType0":                 "icmp.messages.out_type0",
	"IcmpMsgOutType3":                 "icmp.messages.out_type3",
	"TcpRtoAlgorithm":                 "",
	"TcpRtoMin":                       "",
	"TcpRtoMax":                       "",
	"TcpMaxConn":                      "",
	"TcpActiveOpens":                  "tcp.sockets.active_opens",
	"TcpPassiveOpens":                 "tcp.sockets.passive_opens",
	"TcpAttemptFails":                 "tcp.sockets.attempt_fails",
	"TcpEstabResets":                  "tcp.sockets.estab_resets",
	"TcpCurrEstab":                    "tcp.connections.estab",
	"TcpInSegs":                       "tcp.segments.in_segs",
	"TcpOutSegs":                      "tcp.segments.out_segs",
	"TcpRetransSegs":                  "tcp.segments.retrans_segs",
	"TcpInErrs":                       "tcp.segments.in_errs",
	"TcpOutRsts":                      "tcp.segments.out_rsts",
	"UdpInDatagrams":                  "udp.datagrams.in_datagrams",
	"UdpNoPorts":                      "udp.datagrams.no_ports",
	"UdpInErrors":                     "udp.datagrams.in_errors",
	"UdpOutDatagrams":                 "udp.datagrams.out_datagrams",
	"UdpRcvbufErrors":                 "udp.errors.rcvbuf_errors",
	"UdpSndbufErrors":                 "udp.errors.sndbuf_errors",
	"UdpLiteInDatagrams":              "",
	"UdpLiteNoPorts":                  "",
	"UdpLiteInErrors":                 "",
	"UdpLiteOutDatagrams":             "",
	"UdpLiteRcvbufErrors":             "",
	"UdpLiteSndbufErrors":             "",
}

var graphs = map[string]mp.Graphs{
	"tcp.syncookies": {
		Label: "Network: TCP SYN Cookies",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.sockets": {
		Label: "Network: TCP Sockets",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.connections": {
		Label: "Network: TCP Connections",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: false, Type: "uint64"},
		},
	},
	"tcp.segments": {
		Label: "Network: TCP Segments",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.timewait": {
		Label: "Network: TCP TIME_WAITs",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.misc_errors": {
		Label: "Network: TCP Misc Errors",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.timeout": {
		Label: "Network: TCP Timeouts",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.abort": {
		Label: "Network: TCP Aborted Connections",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.paws": {
		Label: "Network: TCP PAWS",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.delayed_acks": {
		Label: "Network: TCP Delayed ACKs",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.queueing": {
		Label: "Network: TCP Queueing",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"tcp.header_prediction": {
		Label: "Network: TCP Header Prediction",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"udp.datagrams": {
		Label: "Network: UDP Datagrams",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"udp.errors": {
		Label: "Network: UDP Errors",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"icmp.messages": {
		Label: "Network: ICMP Messages",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"ip.datagrams": {
		Label: "Network: IP Datagrams",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"ip.packet_type": {
		Label: "Network: IP Packets by Type",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"ip.octets": {
		Label: "Network: IP Octets",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"ip.reassembly": {
		Label: "Network: IP Packet Reassembly",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
	"ip.fragmentation": {
		Label: "Network: IP Packet Fragmentation",
		Unit:  "integer",
		Metrics: []mp.Metrics{
			{Name: "*", Label: "%1", Diff: true, Type: "uint64"},
		},
	},
}

func (p *pluginOpts) GraphDefinition() map[string]mp.Graphs {
	var defs = make(map[string]mp.Graphs)

	for name, graph := range graphs {
		defs[p.prefix + name] = graph
	}

	return defs
}
